📁 com.lairoflair.pictureurl
├── 📁 data/                         ← 🧠 Handles reading/writing notes to file
│   └── NoteRepository.kt
│
├── 📁 ui/                           ← 🎨 Everything visual goes here
│   ├── 📁 components/              ← 🧩 Reusable UI elements
│   │   └── NoteEditor.kt
│   │
│   ├── 📁 navigation/              ← 🚦 App navigation logic
│   │   └── NoteAppNavigation.kt
│   │
│   ├── 📁 screen/                  ← 🖥 Screens that user interacts with
│   │   ├── 📁 home/
│   │   │   └── HomeScreen.kt      ← Shows past notes + "new note" button
│   │   │
│   │   └── 📁 notetaking/
│   │       ├── NoteTakingScreen.kt← UI to create/edit a note
│   │       └── NoteViewModel.kt   ← Handles note state + calls `NoteRepository`
│   │
│   └── 📁 theme/                   ← 🎨 Custom colors, typography, shapes
│       └── (auto-generated by Android Studio)
│
├── 📄 MainActivity.kt              ← Entry point. Hosts `NoteAppNavigation`

package com.lairoflair.pictureurl.ui.screen.home

package com.lairoflair.pictureurl.ui.screen.home

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.material3.SwipeToDismissBox
import androidx.compose.material3.rememberSwipeToDismissBoxState
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import java.io.File

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    onNewNoteClick: () -> Unit = {},
    onNoteClick: (String) -> Unit = {}
) {
    val context = LocalContext.current
    val files = remember {
        mutableStateListOf<File>().apply {
            val fileList = context.filesDir.listFiles()?.filter { it.extension == "txt" } ?: emptyList()
            addAll(fileList)
        }
    }

    Box(modifier = Modifier
        .fillMaxSize()
        .padding(16.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopStart)
        ) {
            Text("📓 Past Notes", style = MaterialTheme.typography.headlineSmall)
            Spacer(modifier = Modifier.height(24.dp))

            if (files.isEmpty()) {
                Text("No notes found")
            } else {
                LazyColumn {
                    items(files, key = { it.name }) { file ->
                        val dismissState = rememberSwipeToDismissBoxState(
                            positionalThreshold = { it * 0.5f },
                            confirmValueChange = {
                                // Delete the file and remove from list
                                file.delete()
                                files.remove(file)
                                true
                            }
                        )

                        SwipeToDismissBox(
                            state = dismissState,
                            backgroundContent = {
                                Box(
                                    modifier = Modifier
                                        .fillMaxSize()
                                        .padding(4.dp),
                                    contentAlignment = Alignment.CenterStart
                                ) {
                                    Text("Deleting...", color = MaterialTheme.colorScheme.error)
                                }
                            },
                            content = {
                                Button(
                                    onClick = { onNoteClick(file.nameWithoutExtension) },
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 4.dp)
                                ) {
                                    Text(file.nameWithoutExtension)
                                }
                            }
                        )
                    }
                }
            }
        }

        Button(
            onClick = onNewNoteClick,
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .size(56.dp),
            shape = RoundedCornerShape(28.dp),
            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
        ) {
            Text("+")
        }
    }
}
